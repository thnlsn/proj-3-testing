{"ast":null,"code":"import _slicedToArray from \"/Users/thomasnelson/Desktop/proj-testing/proj-3-testing/proj-3-layout/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thomasnelson/Desktop/proj-testing/proj-3-testing/proj-3-layout/client/src/context/user/UserState.js\";\n// Initial state and all of our actions will go here, such as fetching data etc.\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport UserContext from './userContext';\nimport UserReducer from './userReducer';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, GET_USER, SET_LOADING } from '../types';\n\nconst UserState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: false,\n    loading: false,\n    user: {}\n  };\n\n  const _useReducer = useReducer(UserReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // LOAD_USER:\n\n\n  const loadUser = async () => {\n    // @todo - load token into global headers\n    try {\n      const res = await axios.get('/api/auth');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // REGISTER_USER:\n\n\n  const register = async formData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/users', formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data // token signed in users.js\n\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg //this is from users.js error\n\n      });\n    }\n  }; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // LOGIN_USER:\n\n\n  const login = () => console.log('login'); //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // LOGOUT_USER:\n\n\n  const logout = () => console.log('logout'); //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // CLEAR_ERRORS:\n\n\n  const clearErrors = () => console.log('clearError'); //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return React.createElement(UserContext.Provider, {\n    value: {\n      // EVERYTHING WE NEED AVAILABE MUST BE HERE\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      error: state.error,\n      register,\n      loadUser,\n      login,\n      logout,\n      clearErrors\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default UserState; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// SEARCH_USERS: Fetch an array of objects from the GitHub API that are users that fit the user query\n\n/*     \n    const searchUsers = async search => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/search/users?q=${search}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data.items);\n\n        dispatch({\n            type: SEARCH_USERS,\n            payload: res.data.items\n        });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// GET_REPOS: Get a single users repositories\n\n/*     \n    const getUserRepos = async username => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/users/${username}/repos?per_page=100&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        dispatch({ type: GET_REPOS, payload: res.data });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// Clear users from state\n\n/*     \n    const clearUsers = () => dispatch({ type: CLEAR_USERS });\n*/","map":{"version":3,"sources":["/Users/thomasnelson/Desktop/proj-testing/proj-3-testing/proj-3-layout/client/src/context/user/UserState.js"],"names":["React","useReducer","axios","UserContext","UserReducer","REGISTER_SUCCESS","REGISTER_FAIL","GET_USER","SET_LOADING","UserState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","user","state","dispatch","loadUser","res","get","type","USER_LOADED","payload","data","err","AUTH_ERROR","register","formData","config","headers","post","response","msg","login","console","log","logout","clearErrors","setLoading","error","children"],"mappings":"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","sourcesContent":["// Initial state and all of our actions will go here, such as fetching data etc.\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport UserContext from './userContext';\nimport UserReducer from './userReducer';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    GET_USER,\n    SET_LOADING\n} from '../types';\n\nconst UserState = props => {\n    const initialState = {\n        token: localStorage.getItem('token'),\n        isAuthenticated: false,\n        loading: false,\n        user: {}\n    };\n\n    const [state, dispatch] = useReducer(UserReducer, initialState);\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // LOAD_USER:\n    const loadUser = async () => {\n        // @todo - load token into global headers\n\n        try {\n            const res = await axios.get('/api/auth');\n\n            dispatch({ type: USER_LOADED, payload: res.data });\n        } catch (err) {\n            dispatch({ type: AUTH_ERROR });\n        }\n    };\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // REGISTER_USER:\n    const register = async formData => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        try {\n            const res = await axios.post('/api/users', formData, config);\n\n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data // token signed in users.js\n            });\n        } catch (err) {\n            dispatch({\n                type: REGISTER_FAIL,\n                payload: err.response.data.msg //this is from users.js error\n            });\n        }\n    };\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // LOGIN_USER:\n    const login = () => console.log('login');\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // LOGOUT_USER:\n    const logout = () => console.log('logout');\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // CLEAR_ERRORS:\n    const clearErrors = () => console.log('clearError');\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // Set Loading\n    const setLoading = () => dispatch({ type: SET_LOADING });\n\n    return (\n        <UserContext.Provider\n            value={{\n                // EVERYTHING WE NEED AVAILABE MUST BE HERE\n                token: state.token,\n                isAuthenticated: state.isAuthenticated,\n                loading: state.loading,\n                user: state.user,\n                error: state.error,\n                register,\n                loadUser,\n                login,\n                logout,\n                clearErrors\n            }}\n        >\n            {props.children}\n        </UserContext.Provider>\n    );\n};\n\nexport default UserState;\n\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// SEARCH_USERS: Fetch an array of objects from the GitHub API that are users that fit the user query\n/*     \n    const searchUsers = async search => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/search/users?q=${search}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data.items);\n\n        dispatch({\n            type: SEARCH_USERS,\n            payload: res.data.items\n        });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// GET_REPOS: Get a single users repositories\n/*     \n    const getUserRepos = async username => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/users/${username}/repos?per_page=100&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        dispatch({ type: GET_REPOS, payload: res.data });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// Clear users from state\n/*     \n    const clearUsers = () => dispatch({ type: CLEAR_USERS });\n*/\n"]},"metadata":{},"sourceType":"module"}