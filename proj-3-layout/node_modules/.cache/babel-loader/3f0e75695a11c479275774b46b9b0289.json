{"ast":null,"code":"import _slicedToArray from \"/Users/thomasnelson/Desktop/proj-testing/proj-3-testing/proj-3-layout/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thomasnelson/Desktop/proj-testing/proj-3-testing/proj-3-layout/src/context/user/UserState.js\";\n// Initial state and all of our actions will go here, such as fetching data etc.\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport UserContext from './userContext';\nimport UserReducer from './userReducer';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, GET_USER, SET_LOADING } from '../types';\n\nconst UserState = props => {\n  const initialState = {\n    user: {},\n    loading: false\n  };\n\n  const _useReducer = useReducer(UserReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // REGISTER_USER:\n\n\n  const register = async formData => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/users', formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data //token\n\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // GET_USER: Get the info for the logged in User\n\n\n  const getUser = async username => {\n    setLoading();\n    const res = await axios.get(`http://localhost:8000/api/auth`);\n    console.log(res.data);\n    dispatch({\n      type: GET_USER,\n      payload: res.data\n    });\n  }; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return React.createElement(UserContext.Provider, {\n    value: {\n      // EVERYTHING WE NEED AVAILABE MUST BE HERE\n      user: state.user,\n      loading: state.loading,\n      getUser\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default UserState; //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// SEARCH_USERS: Fetch an array of objects from the GitHub API that are users that fit the user query\n\n/*     \n    const searchUsers = async search => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/search/users?q=${search}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data.items);\n\n        dispatch({\n            type: SEARCH_USERS,\n            payload: res.data.items\n        });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// GET_REPOS: Get a single users repositories\n\n/*     \n    const getUserRepos = async username => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/users/${username}/repos?per_page=100&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        dispatch({ type: GET_REPOS, payload: res.data });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// Clear users from state\n\n/*     \n    const clearUsers = () => dispatch({ type: CLEAR_USERS });\n*/","map":{"version":3,"sources":["/Users/thomasnelson/Desktop/proj-testing/proj-3-testing/proj-3-layout/src/context/user/UserState.js"],"names":["React","useReducer","axios","UserContext","UserReducer","REGISTER_SUCCESS","REGISTER_FAIL","GET_USER","SET_LOADING","UserState","props","initialState","user","loading","state","dispatch","register","formData","config","headers","res","post","type","payload","data","err","response","msg","getUser","username","setLoading","get","console","log","children"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SACIC,gBADJ,EAEIC,aAFJ,EAGIC,QAHJ,EAIIC,WAJJ,QAKO,UALP;;AAOA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACvB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,OAAO,EAAE;AAFQ,GAArB;;AADuB,sBAMGZ,UAAU,CAACG,WAAD,EAAcO,YAAd,CANb;AAAA;AAAA,QAMhBG,KANgB;AAAA,QAMTC,QANS,oBAQvB;AACA;;;AACA,QAAMC,QAAQ,GAAG,MAAMC,QAAN,IAAkB;AAC/B,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;;AAKA,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,YAAX,EAAyBJ,QAAzB,EAAmCC,MAAnC,CAAlB;AAEAH,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEjB,gBADD;AAELkB,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAFR,CAEa;;AAFb,OAAD,CAAR;AAIH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACVV,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,aADD;AAELiB,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaF,IAAb,CAAkBG;AAFtB,OAAD,CAAR;AAIH;AACJ,GAnBD,CAVuB,CA+BvB;AACA;;;AACA,QAAMC,OAAO,GAAG,MAAMC,QAAN,IAAkB;AAC9BC,IAAAA,UAAU;AAEV,UAAMV,GAAG,GAAG,MAAMlB,KAAK,CAAC6B,GAAN,CAAW,gCAAX,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYb,GAAG,CAACI,IAAhB;AAEAT,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAEf,QAAR;AAAkBgB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAA/B,KAAD,CAAR;AACH,GAPD,CAjCuB,CA0CvB;AACA;;;AACA,QAAMM,UAAU,GAAG,MAAMf,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEd;AAAR,GAAD,CAAjC;;AAEA,SACI,oBAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AACH;AACAI,MAAAA,IAAI,EAAEE,KAAK,CAACF,IAFT;AAGHC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAHZ;AAIHe,MAAAA;AAJG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKlB,KAAK,CAACwB,QARX,CADJ;AAYH,CA1DD;;AA4DA,eAAezB,SAAf,C,CAEA;AACA;;AACA;;;;;;;;;;;;;;;AAeA;AACA;;AACA;;;;;;;;;;;;AAYA;AACA;;AACA","sourcesContent":["// Initial state and all of our actions will go here, such as fetching data etc.\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport UserContext from './userContext';\nimport UserReducer from './userReducer';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    GET_USER,\n    SET_LOADING\n} from '../types';\n\nconst UserState = props => {\n    const initialState = {\n        user: {},\n        loading: false\n    };\n\n    const [state, dispatch] = useReducer(UserReducer, initialState);\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // REGISTER_USER:\n    const register = async formData => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        try {\n            const res = await axios.post('/api/users', formData, config);\n\n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data //token\n            });\n        } catch (err) {\n            dispatch({\n                type: REGISTER_FAIL,\n                payload: err.response.data.msg\n            });\n        }\n    };\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // GET_USER: Get the info for the logged in User\n    const getUser = async username => {\n        setLoading();\n\n        const res = await axios.get(`http://localhost:8000/api/auth`);\n        console.log(res.data);\n\n        dispatch({ type: GET_USER, payload: res.data });\n    };\n\n    //▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n    // Set Loading\n    const setLoading = () => dispatch({ type: SET_LOADING });\n\n    return (\n        <UserContext.Provider\n            value={{\n                // EVERYTHING WE NEED AVAILABE MUST BE HERE\n                user: state.user,\n                loading: state.loading,\n                getUser\n            }}\n        >\n            {props.children}\n        </UserContext.Provider>\n    );\n};\n\nexport default UserState;\n\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// SEARCH_USERS: Fetch an array of objects from the GitHub API that are users that fit the user query\n/*     \n    const searchUsers = async search => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/search/users?q=${search}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data.items);\n\n        dispatch({\n            type: SEARCH_USERS,\n            payload: res.data.items\n        });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// GET_REPOS: Get a single users repositories\n/*     \n    const getUserRepos = async username => {\n        setLoading();\n\n        const res = await axios.get(\n            `https://api.github.com/users/${username}/repos?per_page=100&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        dispatch({ type: GET_REPOS, payload: res.data });\n    };\n*/\n//▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n// Clear users from state\n/*     \n    const clearUsers = () => dispatch({ type: CLEAR_USERS });\n*/\n"]},"metadata":{},"sourceType":"module"}