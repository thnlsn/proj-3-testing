{"ast":null,"code":"import _slicedToArray from \"/Users/thomasnelson/Desktop/Assignments/Homework Assignments/github-finder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/thomasnelson/Desktop/Assignments/Homework Assignments/github-finder/src/App.js\";\nimport React, { Fragment, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\nimport Search from './components/users/Search';\nimport Alert from './components/layout/Alert';\nimport About from './components/pages/About';\nimport axios from 'axios';\nimport GithubState from './context/github/GithubState';\nimport './App.css';\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        users = _useState2[0],\n        setUsers = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        user = _useState4[0],\n        setUser = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        repos = _useState6[0],\n        setRepos = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        loading = _useState8[0],\n        setLoading = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        alert = _useState10[0],\n        setAlert = _useState10[1];\n  /*   async componentDidMount() {\n  this.setState({ loading: true });\n  const res = await Axios.get(\n    `https://api.github.com/users?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n  );\n  this.setState({ users: res.data, loading: false });\n  } */\n  // ▓▓ Get a single GitHub user (? marks FIRST parameter of the search query)\n\n\n  const getUser = async username => {\n    setLoading(true);\n    const res = await axios.get(\"https://api.github.com/users/\".concat(username, \"?client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n    console.log(res.data);\n    setUser(res.data);\n    setLoading(false);\n  }; // ▓▓ Get a single GitHub users repositories\n\n\n  const getUserRepos = async username => {\n    setLoading(true);\n    const res = await axios.get(\"https://api.github.com/users/\".concat(username, \"/repos?per_page=5&sort=created:asc&client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n    console.log(res.data);\n    setRepos(res.data);\n    setLoading(false);\n  }; //▓▓ Clear users from state (passed into search component as a prop)\n\n\n  const clearUsers = () => {\n    setUsers([]);\n    setLoading(false);\n  }; //▓▓ Set Alert\n\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg,\n      type\n    }); // Normally would have (key: value) (msg: msg, type: type), but because it is same, just (msg, type)\n\n    setTimeout(() => setAlert(null), 5000);\n  }; //▓▓ Remove Alert\n\n\n  const removeAlert = () => setAlert(null);\n\n  return React.createElement(GithubState, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Alert, {\n    alert: alert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\" // This exact path will render the search component\n    ,\n    render: props => React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Search, {\n      clearUsers: clearUsers,\n      showClear: users.length > 0 ? true : false,\n      showAlert: showAlert,\n      removeAlert: removeAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Users, {\n      loading: loading,\n      users: users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/about\"\n    /* No render function because no props needed */\n    ,\n    component: About,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/user/:login\",\n    render: props => // user will be filled with the response from getUser(), which will be found in state once called\n    React.createElement(User, Object.assign({}, props, {\n      getUser: getUser,\n      getUserRepos: getUserRepos,\n      user: user,\n      repos: repos,\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }))))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/thomasnelson/Desktop/Assignments/Homework Assignments/github-finder/src/App.js"],"names":["React","Fragment","useState","BrowserRouter","Router","Switch","Route","Navbar","Users","User","Search","Alert","About","axios","GithubState","App","users","setUsers","user","setUser","repos","setRepos","loading","setLoading","alert","setAlert","getUser","username","res","get","process","env","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","console","log","data","getUserRepos","clearUsers","showAlert","msg","type","setTimeout","removeAlert","props","length"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\nimport Search from './components/users/Search';\nimport Alert from './components/layout/Alert';\nimport About from './components/pages/About';\nimport axios from 'axios';\n\nimport GithubState from './context/github/GithubState';\n\nimport './App.css';\n\nconst App = () => {\n    const [users, setUsers] = useState([]);\n    const [user, setUser] = useState({});\n    const [repos, setRepos] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [alert, setAlert] = useState(null);\n\n    /*   async componentDidMount() {\n    this.setState({ loading: true });\n    const res = await Axios.get(\n      `https://api.github.com/users?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    this.setState({ users: res.data, loading: false });\n  } */\n\n    // ▓▓ Get a single GitHub user (? marks FIRST parameter of the search query)\n    const getUser = async username => {\n        setLoading(true);\n\n        const res = await axios.get(\n            `https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        setUser(res.data);\n        setLoading(false);\n    };\n\n    // ▓▓ Get a single GitHub users repositories\n    const getUserRepos = async username => {\n        setLoading(true);\n\n        const res = await axios.get(\n            `https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        setRepos(res.data);\n        setLoading(false);\n    };\n\n    //▓▓ Clear users from state (passed into search component as a prop)\n    const clearUsers = () => {\n        setUsers([]);\n        setLoading(false);\n    };\n\n    //▓▓ Set Alert\n    const showAlert = (msg, type) => {\n        setAlert({ msg, type }); // Normally would have (key: value) (msg: msg, type: type), but because it is same, just (msg, type)\n        setTimeout(() => setAlert(null), 5000);\n    };\n\n    //▓▓ Remove Alert\n    const removeAlert = () => setAlert(null);\n\n    return (\n        <GithubState>\n            <Router>\n                <div className='App'>\n                    <Navbar />\n                    <div className='container'>\n                        <Alert alert={alert} />\n                        <Switch>\n                            <Route\n                                exact\n                                path='/' // This exact path will render the search component\n                                render={props => (\n                                    <Fragment>\n                                        <Search\n                                            clearUsers={clearUsers}\n                                            showClear={\n                                                users.length > 0 ? true : false\n                                            }\n                                            showAlert={showAlert}\n                                            removeAlert={removeAlert}\n                                        />\n                                        <Users\n                                            loading={loading}\n                                            users={users}\n                                        />\n                                    </Fragment>\n                                )}\n                            />\n                            <Route\n                                exact\n                                path='/about' /* No render function because no props needed */\n                                component={About}\n                            />\n                            <Route\n                                exact\n                                path='/user/:login'\n                                render={props => (\n                                    // user will be filled with the response from getUser(), which will be found in state once called\n                                    <User\n                                        {...props}\n                                        getUser={getUser}\n                                        getUserRepos={getUserRepos}\n                                        user={user}\n                                        repos={repos}\n                                        loading={loading}\n                                    />\n                                )}\n                            />\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        </GithubState>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}