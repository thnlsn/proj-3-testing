{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnelson/Desktop/Assignments/Homework Assignments/github-finder/src/App.js\";\nimport React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\nimport Search from './components/users/Search';\nimport Alert from './components/layout/Alert';\nimport About from './components/pages/About';\nimport Axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      user: {},\n      repos: [],\n      loading: false,\n      // false so that we can add a loading spinner for when it is true\n      alert: null\n    };\n\n    this.searchUsers = async search => {\n      this.setState({\n        loading: true\n      });\n      const res = await Axios.get(\"https://api.github.com/search/users?q=\".concat(search, \"&client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n      console.log(res.data.items);\n      this.setState({\n        users: res.data.items,\n        loading: false\n      });\n    };\n\n    this.getUser = async username => {\n      this.setState({\n        loading: true\n      });\n      const res = await Axios.get(\"https://api.github.com/users/\".concat(username, \"?client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n      console.log(res.data);\n      this.setState({\n        user: res.data,\n        loading: false\n      });\n    };\n\n    this.getUserRepos = async username => {\n      this.setState({\n        loading: true\n      });\n      const res = await Axios.get(\"https://api.github.com/users/\".concat(username, \"/repos?per_page=5&sort=created:asc&client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n      console.log(res.data);\n      this.setState({\n        user: res.data,\n        loading: false\n      });\n    };\n\n    this.clearUsers = () => this.setState({\n      users: [],\n      loading: false\n    });\n\n    this.setAlert = (msg, type) => {\n      this.setState({\n        alert: {\n          msg,\n          type\n        }\n      }); // Normally would have (key: value) (msg: msg, type: type), but because it is same, just (msg, type)\n\n      setTimeout(() => this.setState({\n        alert: null\n      }), 5000);\n    };\n\n    this.removeAlert = () => this.setState({\n      alert: null\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          alert = _this$state.alert,\n          users = _this$state.users,\n          user = _this$state.user;\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      alert: alert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\" // This exact path will render the search component\n      ,\n      render: props => React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Search, {\n        searchUsers: this.searchUsers,\n        clearUsers: this.clearUsers,\n        showClear: users.length > 0 ? true : false,\n        setAlert: this.setAlert,\n        removeAlert: this.removeAlert,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(Users, {\n        loading: loading,\n        users: users,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/about\"\n      /* No render function because no props needed */\n      ,\n      component: About,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/user/:login\",\n      render: props => // user will be filled with the response from getUser(), which will be found in state once called\n      React.createElement(User, Object.assign({}, props, {\n        getUserRepos: this.getUserRepos,\n        getUser: this.getUser,\n        user: user,\n        loading: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thomasnelson/Desktop/Assignments/Homework Assignments/github-finder/src/App.js"],"names":["React","Component","Fragment","BrowserRouter","Router","Switch","Route","Navbar","Users","User","Search","Alert","About","Axios","App","state","users","user","repos","loading","alert","searchUsers","search","setState","res","get","process","env","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","console","log","data","items","getUser","username","getUserRepos","clearUsers","setAlert","msg","type","setTimeout","removeAlert","render","props","length"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\nimport Search from './components/users/Search';\nimport Alert from './components/layout/Alert';\nimport About from './components/pages/About';\nimport Axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        users: [],\n        user: {},\n        repos: [],\n        loading: false, // false so that we can add a loading spinner for when it is true\n        alert: null\n    };\n\n    /*   async componentDidMount() {\n    this.setState({ loading: true });\n    const res = await Axios.get(\n      `https://api.github.com/users?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    this.setState({ users: res.data, loading: false });\n  } */\n\n    //▓▓ Search GitHub users (passed into the Search component as a prop)\n    searchUsers = async search => {\n        this.setState({ loading: true });\n\n        const res = await Axios.get(\n            `https://api.github.com/search/users?q=${search}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data.items);\n\n        this.setState({ users: res.data.items, loading: false });\n    };\n\n    // ▓▓ Get a single GitHub user (? marks FIRST parameter of the search query)\n    getUser = async username => {\n        this.setState({ loading: true });\n\n        const res = await Axios.get(\n            `https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        this.setState({ user: res.data, loading: false });\n    };\n\n    // ▓▓ Get a single GitHub users repositories\n    getUserRepos = async username => {\n        this.setState({ loading: true });\n\n        const res = await Axios.get(\n            `https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n        );\n        console.log(res.data);\n\n        this.setState({ user: res.data, loading: false });\n    };\n\n    //▓▓ Clear users from state (passed into search component as a prop)\n    clearUsers = () => this.setState({ users: [], loading: false });\n\n    //▓▓ Set Alert\n    setAlert = (msg, type) => {\n        this.setState({ alert: { msg, type } }); // Normally would have (key: value) (msg: msg, type: type), but because it is same, just (msg, type)\n        setTimeout(() => this.setState({ alert: null }), 5000);\n    };\n\n    //▓▓ Remove Alert\n    removeAlert = () => this.setState({ alert: null });\n\n    render() {\n        const { loading, alert, users, user } = this.state;\n\n        return (\n            <Router>\n                <div className='App'>\n                    <Navbar />\n                    <div className='container'>\n                        <Alert alert={alert} />\n                        <Switch>\n                            <Route\n                                exact\n                                path='/' // This exact path will render the search component\n                                render={props => (\n                                    <Fragment>\n                                        <Search\n                                            searchUsers={this.searchUsers}\n                                            clearUsers={this.clearUsers}\n                                            showClear={\n                                                users.length > 0 ? true : false\n                                            }\n                                            setAlert={this.setAlert}\n                                            removeAlert={this.removeAlert}\n                                        />\n                                        <Users\n                                            loading={loading}\n                                            users={users}\n                                        />\n                                    </Fragment>\n                                )}\n                            />\n                            <Route\n                                exact\n                                path='/about' /* No render function because no props needed */\n                                component={About}\n                            />\n                            <Route\n                                exact\n                                path='/user/:login'\n                                render={props => (\n                                    // user will be filled with the response from getUser(), which will be found in state once called\n                                    <User\n                                        {...props}\n                                        getUserRepos={this.getUserRepos}\n                                        getUser={this.getUser}\n                                        user={user}\n                                        loading={loading}\n                                    />\n                                )}\n                            />\n                        </Switch>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}