{"ast":null,"code":"var _jsxFileName = \"/Users/thomasnelson/Desktop/Assignments/Homework Assignments/github-finder/src/App.js\";\nimport React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\nimport Search from './components/users/Search';\nimport Alert from './components/layout/Alert';\nimport About from './components/pages/About';\nimport Axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      user: {},\n      loading: false,\n      // false so that we can add a loading spinner for when it is true\n      alert: null\n    };\n\n    this.searchUsers = async search => {\n      this.setState({\n        loading: true\n      });\n      const res = await Axios.get(\"https://api.github.com/search/users?q=\".concat(search, \"&client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n      console.log(res.data.items);\n      this.setState({\n        users: res.data.items,\n        loading: false\n      });\n    };\n\n    this.getUser = async username => {\n      this.setState({\n        loading: true\n      });\n      const res = await Axios.get(\"https://api.github.com/users/\".concat(username, \"?client_id=\").concat(process.env.REACT_APP_GITHUB_CLIENT_ID, \"&client_secret=\").concat(process.env.REACT_APP_GITHUB_CLIENT_SECRET));\n      console.log(res.data);\n      this.setState({\n        user: res.data,\n        loading: false\n      });\n    };\n\n    this.clearUsers = () => this.setState({\n      users: [],\n      loading: false\n    });\n\n    this.setAlert = (msg, type) => {\n      this.setState({\n        alert: {\n          msg,\n          type\n        }\n      }); // Normally would have (key: value) (msg: msg, type: type), but because it is same, just (msg, type)\n\n      setTimeout(() => this.setState({\n        alert: null\n      }), 5000);\n    };\n\n    this.removeAlert = () => this.setState({\n      alert: null\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          alert = _this$state.alert,\n          users = _this$state.users,\n          user = _this$state.user;\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      alert: alert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\" // This exact path will render the search component\n      ,\n      render: props => React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Search, {\n        searchUsers: this.searchUsers,\n        clearUsers: this.clearUsers,\n        showClear: users.length > 0 ? true : false,\n        setAlert: this.setAlert,\n        removeAlert: this.removeAlert,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(Users, {\n        loading: loading,\n        users: users,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/about\"\n      /* No render function because no props needed */\n      ,\n      component: About,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/user/:login\",\n      render: props => // user will be filled with the response from getUser(), which will be found in state once called\n      React.createElement(User, Object.assign({}, props, {\n        getUser: this.getUser,\n        user: user,\n        loading: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thomasnelson/Desktop/Assignments/Homework Assignments/github-finder/src/App.js"],"names":["React","Component","Fragment","BrowserRouter","Router","Switch","Route","Navbar","Users","User","Search","Alert","About","Axios","App","state","users","user","loading","alert","searchUsers","search","setState","res","get","process","env","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","console","log","data","items","getUser","username","clearUsers","setAlert","msg","type","setTimeout","removeAlert","render","props","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBb,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACzBc,KADyB,GACjB;AACLC,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,IAAI,EAAE,EAFD;AAGLC,MAAAA,OAAO,EAAE,KAHJ;AAGW;AAChBC,MAAAA,KAAK,EAAE;AAJF,KADiB;;AAAA,SAiBzBC,WAjByB,GAiBX,MAAMC,MAAN,IAAgB;AAC3B,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEA,YAAMK,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,iDAC0BH,MAD1B,wBAC8CI,OAAO,CAACC,GAAR,CAAYC,0BAD1D,4BACsGF,OAAO,CAACC,GAAR,CAAYE,8BADlH,EAAlB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACQ,IAAJ,CAASC,KAArB;AAEA,WAAKV,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAEO,GAAG,CAACQ,IAAJ,CAASC,KAAlB;AAAyBd,QAAAA,OAAO,EAAE;AAAlC,OAAd;AACF,KA1BwB;;AAAA,SA6BzBe,OA7ByB,GA6Bf,MAAMC,QAAN,IAAkB;AACzB,WAAKZ,QAAL,CAAc;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEA,YAAMK,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,wCACiBU,QADjB,wBACuCT,OAAO,CAACC,GAAR,CAAYC,0BADnD,4BAC+FF,OAAO,CAACC,GAAR,CAAYE,8BAD3G,EAAlB;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACQ,IAAhB;AAEA,WAAKT,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAEM,GAAG,CAACQ,IAAZ;AAAkBb,QAAAA,OAAO,EAAE;AAA3B,OAAd;AACF,KAtCwB;;AAAA,SAyCzBiB,UAzCyB,GAyCZ,MAAM,KAAKb,QAAL,CAAc;AAAEN,MAAAA,KAAK,EAAE,EAAT;AAAaE,MAAAA,OAAO,EAAE;AAAtB,KAAd,CAzCM;;AAAA,SA4CzBkB,QA5CyB,GA4Cd,CAACC,GAAD,EAAMC,IAAN,KAAe;AACvB,WAAKhB,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE;AAAEkB,UAAAA,GAAF;AAAOC,UAAAA;AAAP;AAAT,OAAd,EADuB,CACkB;;AACzCC,MAAAA,UAAU,CAAC,MAAM,KAAKjB,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE;AAAT,OAAd,CAAP,EAAuC,IAAvC,CAAV;AACF,KA/CwB;;AAAA,SAkDzBqB,WAlDyB,GAkDX,MAAM,KAAKlB,QAAL,CAAc;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAAd,CAlDK;AAAA;;AAoDzBsB,EAAAA,MAAM,GAAG;AAAA,wBACkC,KAAK1B,KADvC;AAAA,UACEG,OADF,eACEA,OADF;AAAA,UACWC,KADX,eACWA,KADX;AAAA,UACkBH,KADlB,eACkBA,KADlB;AAAA,UACyBC,IADzB,eACyBA,IADzB;AAGN,WACG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAEG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEE,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAEG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAC,KAAD;AACG,MAAA,KAAK,MADR;AAEG,MAAA,IAAI,EAAC,GAFR,CAEY;AAFZ;AAGG,MAAA,MAAM,EAAEuB,KAAK,IACV,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,MAAD;AACG,QAAA,WAAW,EAAE,KAAKtB,WADrB;AAEG,QAAA,UAAU,EAAE,KAAKe,UAFpB;AAGG,QAAA,SAAS,EAAEnB,KAAK,CAAC2B,MAAN,GAAe,CAAf,GAAmB,IAAnB,GAA0B,KAHxC;AAIG,QAAA,QAAQ,EAAE,KAAKP,QAJlB;AAKG,QAAA,WAAW,EAAE,KAAKI,WALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,EAQG,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAEtB,OAAhB;AAAyB,QAAA,KAAK,EAAEF,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARH,CAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAiBG,oBAAC,KAAD;AACG,MAAA,KAAK,MADR;AAEG,MAAA,IAAI,EAAC;AAAS;AAFjB;AAGG,MAAA,SAAS,EAAEJ,KAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBH,EAsBG,oBAAC,KAAD;AACG,MAAA,KAAK,MADR;AAEG,MAAA,IAAI,EAAC,cAFR;AAGG,MAAA,MAAM,EAAE8B,KAAK,IACV;AACA,0BAAC,IAAD,oBACOA,KADP;AAEG,QAAA,OAAO,EAAE,KAAKT,OAFjB;AAGG,QAAA,IAAI,EAAEhB,IAHT;AAIG,QAAA,OAAO,EAAEC,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBH,CAFH,CAFH,CADH,CADH;AA8CF;;AArGwB;;AAwG5B,eAAeJ,GAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Users from './components/users/Users';\nimport User from './components/users/User';\nimport Search from './components/users/Search';\nimport Alert from './components/layout/Alert';\nimport About from './components/pages/About';\nimport Axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n   state = {\n      users: [],\n      user: {},\n      loading: false, // false so that we can add a loading spinner for when it is true\n      alert: null\n   };\n\n   /*   async componentDidMount() {\n    this.setState({ loading: true });\n    const res = await Axios.get(\n      `https://api.github.com/users?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n    );\n    this.setState({ users: res.data, loading: false });\n  } */\n\n   //▓▓ Search GitHub users (passed into the Search component as a prop)\n   searchUsers = async search => {\n      this.setState({ loading: true });\n\n      const res = await Axios.get(\n         `https://api.github.com/search/users?q=${search}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n      );\n      console.log(res.data.items);\n\n      this.setState({ users: res.data.items, loading: false });\n   };\n\n   // ▓▓ Get a single GitHub user (? marks FIRST parameter of the search query)\n   getUser = async username => {\n      this.setState({ loading: true });\n\n      const res = await Axios.get(\n         `https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`\n      );\n      console.log(res.data);\n\n      this.setState({ user: res.data, loading: false });\n   };\n\n   //▓▓ Clear users from state (passed into search component as a prop)\n   clearUsers = () => this.setState({ users: [], loading: false });\n\n   //▓▓ Set Alert\n   setAlert = (msg, type) => {\n      this.setState({ alert: { msg, type } }); // Normally would have (key: value) (msg: msg, type: type), but because it is same, just (msg, type)\n      setTimeout(() => this.setState({ alert: null }), 5000);\n   };\n\n   //▓▓ Remove Alert\n   removeAlert = () => this.setState({ alert: null });\n\n   render() {\n      const { loading, alert, users, user } = this.state;\n\n      return (\n         <Router>\n            <div className='App'>\n               <Navbar />\n               <div className='container'>\n                  <Alert alert={alert} />\n                  <Switch>\n                     <Route\n                        exact\n                        path='/' // This exact path will render the search component\n                        render={props => (\n                           <Fragment>\n                              <Search\n                                 searchUsers={this.searchUsers}\n                                 clearUsers={this.clearUsers}\n                                 showClear={users.length > 0 ? true : false}\n                                 setAlert={this.setAlert}\n                                 removeAlert={this.removeAlert}\n                              />\n                              <Users loading={loading} users={users} />\n                           </Fragment>\n                        )}\n                     />\n                     <Route\n                        exact\n                        path='/about' /* No render function because no props needed */\n                        component={About}\n                     />\n                     <Route\n                        exact\n                        path='/user/:login'\n                        render={props => (\n                           // user will be filled with the response from getUser(), which will be found in state once called\n                           <User\n                              {...props}\n                              getUser={this.getUser}\n                              user={user}\n                              loading={loading}\n                           />\n                        )}\n                     />\n                  </Switch>\n               </div>\n            </div>\n         </Router>\n      );\n   }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}